"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[605],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),d=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=d(e.components);return a.createElement(c.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=d(n),f=r,m=p["".concat(c,".").concat(f)]||p[f]||s[f]||o;return n?a.createElement(m,i(i({ref:t},u),{},{components:n})):a.createElement(m,i({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=p;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var d=2;d<o;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},3919:function(e,t,n){function a(e){return!0===/^(\w*:|\/\/)/.test(e)}function r(e){return void 0!==e&&!a(e)}n.d(t,{b:function(){return a},Z:function(){return r}})},4996:function(e,t,n){n.d(t,{C:function(){return o},Z:function(){return i}});var a=n(2263),r=n(3919);function o(){var e=(0,a.Z)().siteConfig,t=(e=void 0===e?{}:e).baseUrl,n=void 0===t?"/":t,o=e.url;return{withBaseUrl:function(e,t){return function(e,t,n,a){var o=void 0===a?{}:a,i=o.forcePrependBaseUrl,l=void 0!==i&&i,c=o.absolute,d=void 0!==c&&c;if(!n)return n;if(n.startsWith("#"))return n;if((0,r.b)(n))return n;if(l)return t+n;var u=n.startsWith(t)?n:t+n.replace(/^\//,"");return d?e+u:u}(o,n,e,t)}}}function i(e,t){return void 0===t&&(t={}),(0,o().withBaseUrl)(e,t)}},3754:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return d},toc:function(){return u},default:function(){return p}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=(n(4996),["components"]),l={id:"downloadData",title:"Download Data",sidebar_label:"Download Data"},c=void 0,d={unversionedId:"downloadData",id:"downloadData",isDocsHomePage:!1,title:"Download Data",description:"Download the data collected using the Cozie Apple Watch survey",source:"@site/docs/downloadData.md",sourceDirName:".",slug:"/downloadData",permalink:"/docs/downloadData",editUrl:"https://github.com/FedericoTartarini/cozie-apple/tree/master/my-website/docs/downloadData.md",version:"current",frontMatter:{id:"downloadData",title:"Download Data",sidebar_label:"Download Data"},sidebar:"someSidebar",previous:{title:"Installation",permalink:"/docs/installation"},next:{title:"Getting Started",permalink:"/docs/gettingStarted"}},u=[{value:"Download the data collected using the Cozie Apple Watch survey",id:"download-the-data-collected-using-the-cozie-apple-watch-survey",children:[]}],s={toc:u};function p(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"download-the-data-collected-using-the-cozie-apple-watch-survey"},"Download the data collected using the Cozie Apple Watch survey"),(0,o.kt)("p",null,"You can download the data you have collected using the Cozie Apple Watch survey using the following Python code.\nPlease note that you will have to specify your ",(0,o.kt)("inlineCode",{parentName:"p"},"USER_ID")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"API_KEY"),".\nTherefore, it is very important that you have successfully completed Step 5 in ",(0,o.kt)("a",{parentName:"p",href:"/docs/installation"},"Instructions for testers"),".\nYou can get these information by emailing us at ",(0,o.kt)("a",{parentName:"p",href:"mailto:cozie.app@gmail.com"},"cozie.app@gmail.com")),(0,o.kt)("p",null,"All the data you have queried are saved inside the Pandas dataframe called ",(0,o.kt)("inlineCode",{parentName:"p"},"df"),"."),(0,o.kt)("p",null,"Keep also in mind that some records (rows of the dataframe) only contain heart rate data.\nConsequently if you are interested in analysing only the responses that a participant (USER_ID) provided using the apple watch, please first filter out all the records which contain 'NaN' in the VoteLog column using the following command ",(0,o.kt)("inlineCode",{parentName:"p"},"df = df.dropna(subset=['voteLog'])")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"YOUR_TIMEZONE = 'Asia/Singapore'\nUSER_ID = 'XXXXXXX'\nWEEKS = \"10\"\nAPI_KEY = 'YYYYYY'\n\npayload = {'user_id': USER_ID, 'weeks': WEEKS}\n\n# the api-key below is limited to 200 queries per day. Please contact us to get an API key\nheaders = {\"Accept\": \"application/json\", 'x-api-key': API_KEY}\n\nresponse = requests.get( 'https://0iecjae656.execute-api.us-east-1.amazonaws.com/default/CozieApple_Read_Influx', params=payload, headers=headers)\nmy_json = response.content.decode('utf8').replace(\"'\", '\"')\ndata = json.loads(my_json)\ndf = pd.read_json(data[1]['data']).T\ndf.index = df.index.tz_localize('UTC').tz_convert(YOUR_TIMEZONE)\n\nprint(df.head())\n")))}p.isMDXComponent=!0}}]);